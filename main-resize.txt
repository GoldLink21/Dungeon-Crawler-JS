const dir={UP:'up',DOWN:'down',LEFT:'left',RIGHT:'right'},
T={
    SIZE:35,W:'wall',P:'path',L:'lava',
    LOCK:'lock',S:'start',E:'end',H:'hidden',R:'rock',
    //Put a delay after them as a string
    T:{U:'trap '+dir.UP+' ',D:'trap '+dir.DOWN+' ',L:'trap '+dir.LEFT+' ',R:'trap '+dir.RIGHT+' '},
    PORTAL:{
        A:"portalA ",B:"portalB "
    }
}
var debug={
    inv:false,
    showInfo:true,
    noFlip:false,
    changeFirstFloor:false,
    firstFloor:8,
    infKeys:false,
    nextFloor:true,
}
var curFloor=0,board=setFloorAs(T.W),offset={x:0,y:0},keys=[],darts=[],traps=[],flips={vert:false,horiz:false},actualLoad=false;

var game={
    onEnd:false,
    canMove:true,
    deaths:0,
    loops:0,
}



/**
 * @description Loads a specific floor
 * @param {number} floor The floor to load 
 */
function loadFloor(floor){
    removeKeys();
	removeDarts();
    curFloor=floor;
    flips.vert=chance(1,2);
    flips.horiz=chance(1,2);
    if(debug.noFlip){flips.vert=false;flips.horiz=false;}
    actualLoad=false;
    if(getFloor(floor)){
        //if(getFloor(floor).length!==board.length||getFloor(floor)[0].length!==board[0].length)  
        actualLoad=true;
        //board=tryFlip(getFloor(floor));
        board=getFloor(floor)
        remakeBoard();
    }else
        return true;
    resetPlayerPosition();
    redrawBoard();
    trapInit()
    redrawKeys() 
}

function getFloor(n){
    
    if(actualLoad&&debug.changeFirstFloor){
        if(n===0){
            debug.changeFirstFloor=false;
            return getFloor(debug.firstFloor)
        }
    }
    switch(n){
        case 0:return floorZero()
        case 1:return floorOne()
        case 2:return floorTwo()
        case 3:return floorThree()
        case 4:return floorFour()
        case 5:return floorFive()
        case 6:return floorSix()
        case 7:return floorSeven()
        case 8:return floorEight()
        default:return false;
    }
}

/**@description Loads the next floor */
function nextFloor(){
    if(loadFloor(++curFloor)){
        document.getElementById('player').hidden=true;
        board=setFloorAs(T.P);
        redrawBoard();
        game.onEnd=true;
        setHelpInfo("Press Enter to begin anew");
    }
}

function flipVert(arr){
    var temp=[];
    for(let i=0;i<9;i++)temp[i]=arr[8-i];
    for(let i=0;i<9;i++){
        for(let j=0;j<9;j++){
            var ele=temp[i][j];
            if(ele.indexOf(T.T.U)===0)
                temp[i][j]=T.T.D+ele.split(' ')[2];
            else if(ele.indexOf(T.T.D)===0)
                temp[i][j]=T.T.U+ele.split(' ')[2];
        }
    }
    return temp;
}
function flipHor(arr){
    var temp=[];
    for(let i=0;i<9;i++){
        temp[i]=[];
        for(let j=0;j<9;j++){
            temp[i][j]=arr[i][8-j];
        }
    }
    for(let i=0;i<9;i++){
        for(let j=0;j<9;j++){
            var ele=temp[i][j];
            if(ele.indexOf(T.T.L)===0)
                temp[i][j]=T.T.R+ele.split(' ')[2];
            else if(ele.indexOf(T.T.R)===0)
                temp[i][j]=T.T.L+ele.split(' ')[2];
        }
    }
    
    return temp;
}
function tryFlip(arr){
    var temp=[];
    for(let i=0;i<9;i++){
        temp[i]=[];
        for(let j=0;j<9;j++)temp[i][j]=arr[i][j];
    }
    if(flips.vert)temp=flipVert(temp);
    if(flips.horiz)temp=flipHor(temp);        
    return temp;
}

/**
 * @description Changes the x and y's of arr to be the type
 * @param {string[]} arr The array to edit
 * @param {number|number[]} x The value(s) of x that you want the tiles to be
 * @param {number|number[]} y The value(s) of y that you want the tiles to be
 * @param {string} type The string of the type from the var T. Defaults to T.P
 */
function tile(arr,x,y,type){
    //Pass in the array to edit, the x value(s), the y value(s) and the type to make them
    if(!type) type=T.P;
	var xArr=Array.isArray(x),yArr=Array.isArray(y);
    if(xArr){
  	    if(yArr)
    	    for(let i=0;i<x.length;i++)
      	        arr[y[i]][x[i]]=type;
        else
    	    for(let i=0;i<x.length;i++)
      	        arr[y][x[i]]=type;
    }else if(yArr)
  	    for(let i=0;i<y.length;i++)
    	    arr[y[i]][x]=type;
    else
  	    arr[y][x]=type;
}
/**
 * @param {string[][]} arr The array to edit
 * @param {number[]} start X and Y of Start
 * @param {number[]} end X and Y of End  
 */
function SaE(arr,start,end){arr[start[1]][start[0]]=T.S;arr[end[1]][end[0]]=T.E;}

//tiles are temp[y][x] (x,y) from top left starting at 0
function floorZero(){
    /*let temp=setFloorAs(T.W);
    tile(temp,[1,2,3],6);
    tile(temp,3,[4,5])
    tile(temp,[3,4,5],4);
    tile(temp,5,[2,3,4]);
    tile(temp,[5,6,7],2);
    tile(temp,1,5,T.W);
    tile(temp,[2,4,4,6],[5,5,3,3],T.L);
    tile(temp,[0,2,4],[6,4,2],T.T.R+"55");
    SaE(temp,[1,7],[7,1]);
    setHelpInfo('Use arrow keys or wasd to move. Avoid the lava tiles and the darts. The goal is to get to the gold tile.');
    return temp;*/

    let temp=setFloorAs(T.P,10,5);
    SaE(temp,[0,0],[9,4])
    return temp;
}
function floorOne(){ 
    let temp=setFloorAs(T.W);
    for(let i=1;i<8;i++)
        tile(temp,[1,3,5,7],i)
    tile(temp,[2,3,4,5,6],7);
    tile(temp,4,2);
    tile(temp,[3,5],1,T.W)
    tile(temp,[4,2,6,4,4],[7,6,6,1,6],T.L);
    tile(temp,[8],[6],T.T.L+'40');
    tile(temp,0,6,T.T.R+'40');
    tile(temp,4,0,T.T.D+'40');
    SaE(temp,[1,1],[7,1])
    setHelpInfo('Darts can fly over lava, which can lead to increased difficulty sometimes')
    return temp;
}
function floorTwo(){
    let temp=setFloorAs(T.W);
    tile(temp,[2,3,5,6],1);
    tile(temp,[3,4,5],2);
    tile(temp,4,[3,4,5,6,7]);
    tile(temp,6,1,T.LOCK)
    tile(temp,[3,4,5],[3,1,3],T.L);
    tile(temp,3,[4,6],T.T.R+'25')
    tile(temp,5,[4,6],T.T.L+'25')
    tile(temp,[2,6],0,T.T.D+'25')
    tile(temp,[2,6],2,T.T.U+'25')
    addKeys([4,7]);
    SaE(temp,[1,1],[7,1]);
    setHelpInfo("Grab the key to open the blue locked tile")
    return temp;
}
function floorThree(){
    var temp=setFloorAs(T.W);
    tile(temp,[1,2,3,4,5,6,7],4);
    tile(temp,0,[2,3,4])
    tile(temp,[0,1,2,3,4,5,6,7,8],0,T.H)
    tile(temp,8,[1,2,3],T.H);
    tile(temp,[1,3,5,7],3,T.T.D+'60')
    tile(temp,[2,4,6],5,T.T.U+'40');
    SaE(temp,[0,1],[8,4]);
    setHelpInfo("The darts are pretty small. Maybe you can use that to your advantage")
    return temp;
}
function floorFour(){
    var temp=setFloorAs(T.W);
    tile(temp,1,[1,2,3,4,5,6]);
    tile(temp,[2,3,4],6);
    tile(temp,4,[2,3,4,5,6])
    tile(temp,[5,6,7],2)
    tile(temp,7,[3,4,5,6])

    tile(temp,[4,7,1],[1,7,7],T.L)
    tile(temp,[2,5,3,8,2],[4,5,3,4,2])
    tile(temp,[1,7],[8,8],T.T.U+'57');
    tile(temp,4,0,T.T.D+'57')
    SaE(temp,[0,1],[8,6]);
    setHelpInfo(-1);
    return temp;
}
function floorFive(){
    let temp=border(T.P,T.L);
    tile(temp,2,[1,2,3,4,5,6,7],T.L)
    tile(temp,4,[1,2,3,4,5,6,7],T.L)
    tile(temp,6,[1,2,3,4,5,6,7],T.L)
    if(chance(1,2)){
        tile(temp,[2,4,6],1,T.LOCK)
        addKeys([1,7],[3,7],[5,7])
        SaE(temp,[1,1],[7,7])
    }else{
        tile(temp,[2,4,6],7,T.LOCK)
        addKeys([1,1],[3,1],[5,1])
        SaE(temp,[1,7],[7,1])
    }
    if(chance(1,2))
        tile(temp,8,[2,4,6],T.T.L+'40')
    else
        tile(temp,0,[2,4,6],T.T.R+'40')
    return temp;
}
function floorSix(){
    let temp=setFloorAs(T.W);
    tile(temp,4,[1,2,3,4,5,6,7]);
    tile(temp,[1,2,3,5,6,7],4);
    tile(temp,[5,6,7],4,T.LOCK);
    addKeys([4,1],[4,7],[1,4]);
    tile(temp,[5,5],[2,6],T.L);
    tile(temp,[6,6],[2,6],T.T.L+"45")
    tile(temp,2,3,T.T.D+"45")
    tile(temp,2,5,T.T.U+'45');
    SaE(temp,[4,4],[8,4])
    return temp;
}
function floorSeven(){
    let temp=border(T.LOCK,T.W);
    if(actualLoad){
        if(chance(1,5))
            player.keys=47;
        else
            for(let i=1;i<8;i++)for(let j=1;j<8;j++)addKeys([i,j])
    }
    tile(temp,0,[2,3,4,5,6],T.T.R+'35');
    tile(temp,8,[2,3,4,5,6],T.T.L+'35');
    tile(temp,[2,3,4,5,6],0,T.T.D+'35');
    tile(temp,[2,3,4,5,6],8,T.T.U+'35');
    SaE(temp,[7,7],[1,1])
    setHelpInfo("You can also hit r to restart the current floor")
    return temp;
}
function floorEight(){
    let temp=setFloorAs(T.W)
    tile(temp,[1,4,4],[3,6,2],T.R)
    tile(temp,1,[2,4,5,6,7])
    tile(temp,[2,3,4,5],7)
    tile(temp,3,[1,2,3,4,5,6])
    tile(temp,3,0,T.T.D+"55")
    tile(temp,[5,6,7],2)
    tile(temp,[1,7],[6,2],T.L)
    tile(temp,7,[3,4,5,6])
    tile(temp,5,6)
    SaE(temp,[1,1],[7,7])
    setHelpInfo('Walk into the rock to push it to the next tile. It can fill in lava pits so you can walk over them')
    return temp;
}

/**@returns true only with an n/d chance, else false*/
function chance(n,d){return Math.floor(Math.random()*d)<n;}

/**@description Sets the text of the help info to str. If -1 is passed in, will hide the element */
function setHelpInfo(str){
    var ele=document.getElementById('help')
    if(str===-1){
        ele.hidden=true;
    }else{
        ele.textContent=str
        ele.hidden=false;
    }
}

/**
 * @returns {string[][]}A new array with the center as the base and the border as borderType
 * @param {string} base The center area of the new array
 * @param {string} borderType The type for the border of the new array
 */
function border(base,borderType,width,height){
    if(!width)width=9;
    if(!height)height=9;
    
    var temp=setFloorAs(base,width,height);
    for(var i=0;i<height;i++){
        for(var j=0;j<width;j++)
            tile(temp,j,[0,height-1],borderType);
        tile(temp,[0,width-1],i,borderType)
    }
    return temp;
}
/**
 * @returns {string[][]} A new array of the value type
 * @param {string} type The value of all items in the new array
 */
function setFloorAs(type,width,height){
    if(!width)width=9;
    if(!height)height=9;
    let temp=[];
    for(let i=0;i<height;i++){
        temp[i]=[];
        for(let j=0;j<width;j++)
            tile(temp,j,i,type)
    }
    return temp;
}
/**@description Updates all HTML elements of the board*/
function redrawBoard(){ 
    for(var i=0;i<board.length;i++)
        for(var j=0;j<board[i].length;j++){
            var curEle=document.getElementById(i+','+j);
            //if(!curEle.classList.contains(board[i][j]))
                curEle.className='tile '+board[i][j];
        }
}
/**@description Puts the player on the start square*/
function resetPlayerPosition(){
    for(var i=0;i<board.length;i++)
        for(var j=0;j<board[i].length;j++)
            if(board[i][j]===T.S){
                player.x=j*T.SIZE+(1/2)*T.SIZE-(player.width/2);
                player.y=i*T.SIZE+(1/2)*T.SIZE-(player.height/2);
                redrawPlayer();return; 
            }
}

function remakeBoard(){
    var tilesEle=document.getElementById('tiles');
    tilesEle.innerHTML="";
    for(var i=0;i<board.length;i++){
        var curRow=document.createElement('div');
        curRow.className="row";
        for(var j=0;j<board[i].length;j++){
            var curEle=document.createElement('div');
            curEle.id=i+','+j;
            curEle.className='tile '+board[i][j];
            curRow.appendChild(curEle);
        }
        tilesEle.appendChild(curRow);
    }
}


/**@description Creates all the HTML elements */
function boardInit(){
    
    var boardEle=document.createElement('div');
    boardEle.id='board';
    document.body.appendChild(boardEle);

    var titleEle=document.createElement('h1');
    titleEle.innerHTML="Dungeon Crawler"
    boardEle.appendChild(titleEle)

    var infoEle=document.createElement('div');
    infoEle.id='info'
    infoEle.innerHTML="Keys: "+player.keys;
    boardEle.appendChild(infoEle);

    var p = document.createElement('div');
    p.id='player';
    boardEle.appendChild(p);
    player.ele=p;

    var tilesEle=document.createElement('div');
    tilesEle.id='tiles'
    boardEle.appendChild(tilesEle)

    loadFloor(0);
    remakeBoard()

    var helpEle=document.createElement('div');
    helpEle.id='help'
    boardEle.appendChild(helpEle);

    if(debug.showInfo){
        var debugEle=document.createElement('div');
        debugEle.id="debug"
        boardEle.appendChild(debugEle);
        debug.ele=debugEle;
    }

    resetOffset();
    loadFloor(0);
    redrawBoard();
    resetPlayerPosition();
}
/**@description Sets the values of the offset for any change in the HTML */
function resetOffset(){
	offset.x=document.getElementById('0,0').offsetLeft;
    offset.y=document.getElementById('0,0').offsetTop;
    redrawPlayer();
    redrawKeys();
    updateInfo()
    if(debug.showInfo)
        updateDebugInfo()
    if(debug.infKeys)
        player.keys=5;
    return offset;
}

function updateDebugInfo(){
    debug.ele.innerHTML="Floor:"+curFloor+"<br>Player X:"+player.x+"<br>Player Y:"+player.y+"<br>Player dir:"+player.dir+
    "<br>Flips:"+JSON.stringify(flips)+"<br>Red:"+player.redCount;
}

/**
 * @returns true if a collides with b
 * @param {player} a player
 * @param {Object} b Object 2
 */
function isCollide(a,b){return!(((a.y+a.height)<(b.y))||(a.y>(b.y+b.height))||((a.x+a.width)<b.x)||(a.x>(b.x+b.width)));}

var player={
    x:0,y:0,animCount:0,animMax:3,dir:dir.UP,
    speed:5,keys:0,width:16,height:16,alt:false,redCount:0,redCountMax:5,
    canMove:{
        up:false,down:false,left:false,right:false
    },
    move(){
        var dx=0,dy=0;
        if(game.canMove){
        
            if(player.canMove.up) dy-=1;
            if(player.canMove.down) dy+=1;
            if(player.canMove.left) dx-=1;
            if(player.canMove.right) dx+=1;
        }
        if(dx!==0||dy!==0)player.animCount++;
        if(player.animCount>player.animMax){
            player.animCount=0;
            player.alt=!player.alt;
        }
        
        if(player.ele.style.background==="red"){
            if(player.redCount>=player.redCountMax){
                player.redCount=0;
                player.ele.style.background="blue";
            }else
                player.redCount++
        }

        player.x+=dx*player.speed;
        player.y+=dy*player.speed;
        
        if(!checkCollisions(player.x,player.y)){
            player.x-=dx*player.speed;
            player.y-=dy*player.speed;
        }
        checkKeyCollide();
        resetOffset()
    },
    setPosition(x,y){
        if(x>=0&&x<board[0].length)
            player.x=x*T.SIZE+(1/2)*T.SIZE-(player.width/2);
        if(y>=0&&y<board.length)
            player.y=y*T.SIZE+(1/2)*T.SIZE-(player.height/2);
    }
};
/**@description Sets all the values of the players possible movement to false */
function resetMovement(){
    player.canMove.up=false;player.canMove.down=false;
    player.canMove.left=false;player.canMove.right=false;
}

function getRounded(obj){
    var x=obj.x,y=obj.y,width=obj.width,height=obj.height;
    return[rpHelp(x,y),rpHelp(x+width,y),rpHelp(x+width,y+height),rpHelp(x,y+height)]
}

/**@description Helper function for the getRounded() funtion */
function rpHelp(one,two){return[Math.floor(one/T.SIZE),Math.floor(two/T.SIZE)];}

function updateInfo(){
    var ele = document.getElementById('info');
    ele.innerHTML="Floor: "+curFloor+",  Keys: "+player.keys+",  Deaths: "+game.deaths;
    if(game.loops>0)
        ele.innerHTML+=',  Game Loops: '+game.loops;
}

/**@returns true if player collides with a key*/
function checkKeyCollide(){
    var i=0;
    while(i<keys.length){
        if(isCollide(player,keys[i])){
            var keyEle= document.getElementById('k'+Math.floor(keys[i].x/T.SIZE)+','+Math.floor(keys[i].y/T.SIZE));
            document.getElementById('board').removeChild(keyEle);
            player.keys++;
            keys.splice(i,1);
            return true;
        }
        else i++
    }return false;
}
/**
 * @description Adds a key at tile x and y
 * @param {number} x @param {number} y 
 */
function Key(x,y){
    if(actualLoad){
        var keyEle=document.createElement('div');
        if(flips.horiz)x=8-x;
        if(flips.vert)y=8-y;
        var thisKey={width:10,height:10,x:x*T.SIZE+T.SIZE/3,y:y*T.SIZE+T.SIZE/3,ele:keyEle}
        keys.push(thisKey);
        keyEle.className='key';
        keyEle.id='k'+x+','+y;
        document.getElementById('board').appendChild(keyEle);
        keyEle.style.top=((thisKey.y)+offset.y)+'px';
        keyEle.style.left=((thisKey.x)+offset.x)+'px';
    }
}

function redrawKeys(){keys.forEach(key=>{
    key.ele.style.top=((key.y)+offset.y)+'px';
    key.ele.style.left=((key.x)+offset.x)+'px';
})}
/**@description Adds multiple keys at once @argument Points [x1,y1],[x2,y2],... */
function addKeys(){for(let i=0;i<arguments.length;i++)Key(arguments[i][0],arguments[i][1]);}

/**@description Kind of a constructor, but done without the new keyword */
function Dart(x,y,direction){
    var dartEle=document.createElement('div');
    dartEle.className='dart';
    var d={
        width:10,height:10,direction:direction,
        x:x*T.SIZE+(1/2)*T.SIZE-5,y:y*T.SIZE+(1/2)*T.SIZE-5,
        speed:4,index:darts.length,toRemove:false,ele:dartEle,
        checkCollide(){
            var p=getRounded(this)
            for(var i=0;i<p.length;i++){
                var x=p[i][0];
                var y=p[i][1];
                if(isCollide(player,this)){
                    this.toRemove=true;
                    player.ele.style.background="red";
                    game.deaths++;
                    if(!debug.inv){
                        resetPlayerPosition();
                        return true;
                    }
                }
                if(!checkDartTile(x,y)){
                    this.toRemove=true;
                    return false;
                }
            }
            return true;
        },redraw(){
            this.ele.style.top=((this.y)+offset.y)+'px';
            this.ele.style.left=((this.x)+offset.x)+'px';
        },move(){
            switch(this.direction){
                case(dir.UP):this.y-=this.speed;break;
                case(dir.DOWN):this.y+=this.speed;break;
                case(dir.LEFT):this.x-=this.speed;break;
                case(dir.RIGHT):this.x+=this.speed;break;
            }
            this.checkCollide();
            this.redraw();
        }
    }
    document.getElementById('board').appendChild(dartEle);
    d.redraw();
    darts.push(d);
}

/**@description Flags all darts to be removed */
function removeDarts(){
    for(let i=0;i<darts.length;i++)darts[i].toRemove=true;
    traps=[];
}

/**@description Moves all darts and removes any that need to be*/
function moveDarts(){
    for(let i=0;i<darts.length;i++){
        darts[i].move();
        if(darts[i].toRemove){
            document.getElementById('board').removeChild(darts[i].ele);
            darts.splice(i--,1);
        }
    }
}
/**
 * @description Tells if the dart at the specified location can keep moving
 * @param {number} y Rounded y value of the dart's position
 * @param {number} x Rounded x value of the dart's position
 */
function checkDartTile(y,x){
    if(x<0||y<0||x>board[0].length-1||y>board.length-1||board[x][y]===T.LOCK||board[x][y]===T.W)
        return false;
    if(board[x][y]===T.P||board[x][y]===T.S||board[x][y]===T.E||board[x][y]===T.L||board[x][y].indexOf('t')===0)
        return true;
}

/**@description Increments all traps delay to set when to fire */
function addDarts(){for(let i=0;i<traps.length;i++)traps[i].fire();}

function trapInit(){
	for(let i=0;i<board.length;i++)
		for(let j=0;j<board[i].length;j++)
			if(board[i][j].indexOf('t')===0)
				traps.push({
                    x:j,y:i,dir:board[j][i].split(' ')[1],delay:board[j][i].split(' ')[2],count:0,
					fire(){
                        if(this.count>=this.delay){
                            this.count=0;
                            Dart(this.y,this.x,this.dir);
                        }
                        else this.count++;
					}
				})
}

/**@description Removes all keys from the board, array, and player*/
function removeKeys(){
    Array.from(document.getElementsByClassName('key')).forEach(ele=>{document.getElementById('board').removeChild(ele)})
    keys=[];player.keys=0;
}
/**
 * @returns true if the player can move there and false if they cannot
 * @param {number} y The rounded y position of the player
 * @param {number} x The rounded x position of the player
 */
function checkTile(y,x){
    if(x<0||y<0||y>board[0].length||x>board.length)
        return false;
    if(board[x][y]===T.P||board[x][y]===T.S||board[x][y]===T.H)
        return true;
    if(board[x][y]===T.E)
        nextFloor();
    if(board[x][y]===T.LOCK){
        if(player.keys>0){
            player.keys--;
            board[x][y]=T.P;
            redrawBoard();
            return true;
        }
    }if(board[x][y]===T.L){
        if(!debug.inv)
            resetPlayerPosition();
        player.ele.style.background="red";
        game.deaths++;
    }if(board[x][y]===T.R){
        var xCheck=x,yCheck=y;
        switch(player.dir){
            case dir.UP:
                xCheck--;
                break;
            case dir.DOWN:
                xCheck++
                break;
            case dir.LEFT:
                yCheck--
                break;
            case dir.RIGHT:
                yCheck++;
                break;
        }
        if(checkRockTile(yCheck,xCheck)){
            if(board[xCheck][yCheck]===T.L){
                board[xCheck][yCheck]=T.P;
                board[x][y]=T.P;
            }else{
                board[xCheck][yCheck]=T.R;
                board[x][y]=T.P;
            }
            
        }
        redrawBoard()

    }
}

function checkRockTile(y,x){
    if(x<0||y<0||x>8||y>8)
        return false;
    if(board[x][y]===T.P||board[x][y]===T.L)
        return true;
}

/**
 * @description Checks all corners of the player for movement
 * @returns true if the movement was successful and false if it was not
 */
function checkCollisions(){
    var pPoints=getRounded(player);
    for(var i=0;i<pPoints.length;i++){
        var x=pPoints[i][0];
        var y=pPoints[i][1];
        if(!checkTile(x,y)) return false;
    }
    return true;
}

document.addEventListener('keydown',(event)=>{resetMovement();eventHelper(event,true)});
document.addEventListener('keyup',(event)=>{
    eventHelper(event,false);
    if(event.key==='r'){
        loadFloor(curFloor);
    }
    if(event.key==='/')
        if(debug.nextFloor)
            nextFloor()
    if(event.key==="Enter")
        if(game.onEnd){
            loadFloor(0)
            game.onEnd=false;
            player.ele.hidden=false
            game.loops++;
        }
})

function eventHelper(event,bool){
    switch(event.key){
        case'ArrowUp':case'w':if(bool)player.dir=dir.UP;player.canMove.up=bool;break;
        case'ArrowDown':case's':if(bool)player.dir=dir.DOWN;player.canMove.down=bool;break;
        case'ArrowRight':case'd':if(bool)player.dir=dir.RIGHT;player.canMove.right=bool;break;
        case'ArrowLeft':case'a':if(bool)player.dir=dir.LEFT;player.canMove.left=bool;break;
    }
}

/**@description Changes the div element of the player */  
function redrawPlayer(){
    var p = document.getElementById('player');
    p.style.top=player.y+offset.y+'px';
    p.style.left=player.x+offset.x+'px';
}

boardInit();
var playerMove=setInterval(player.move,60);
var dartMove=setInterval(moveDarts,60);
var shootDart=setInterval(addDarts, 60)